<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>White Label Digital Twins on WLDT</title><link>https://wldt.github.io/</link><description>Recent content in White Label Digital Twins on WLDT</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2023 Hyas</copyright><lastBuildDate>Fri, 06 Oct 2023 08:47:36 +0000</lastBuildDate><atom:link href="https://wldt.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>WLDT Library Version 0.3.0</title><link>https://wldt.github.io/blog/wldt-library-version-0.3.0/</link><pubDate>Wed, 13 Mar 2024 16:27:22 +0200</pubDate><guid>https://wldt.github.io/blog/wldt-library-version-0.3.0/</guid><description>ðŸ“£ We&amp;rsquo;re thrilled to announce the release of version 0.3.0 of the White Label Digital Twins (WLDT) library! This release brings significant enhancements, improvements, and new features to further empower developers in designing, developing, and deploying Digital Twins within Internet of Things (IoT) ecosystems.</description></item><item><title>Physical Adapter</title><link>https://wldt.github.io/docs/guides/physical-adapter/</link><pubDate>Fri, 09 Feb 2024 12:09:02 +0100</pubDate><guid>https://wldt.github.io/docs/guides/physical-adapter/</guid><description>The developer can use an existing Physical Adapter or create a new one to handle the communication with a specific physical twin.</description></item><item><title>Shadowing Function</title><link>https://wldt.github.io/docs/guides/shadowing-function/</link><pubDate>Fri, 09 Feb 2024 12:15:33 +0100</pubDate><guid>https://wldt.github.io/docs/guides/shadowing-function/</guid><description>After the definition of the Physical Adapter it is time to start implementing the core of our DT through the definition of its shadowing function in charge of:</description></item><item><title>Digital Adapter</title><link>https://wldt.github.io/docs/guides/digital-adapter/</link><pubDate>Fri, 09 Feb 2024 12:16:06 +0100</pubDate><guid>https://wldt.github.io/docs/guides/digital-adapter/</guid><description>The las component that we have to implement to complete our first simple Digital Twin definition through the WLDT library is a Digital Adapter in charge of:</description></item><item><title>DT Engine &amp; DT Instance</title><link>https://wldt.github.io/docs/guides/dt-engine-dt-instance/</link><pubDate>Fri, 09 Feb 2024 12:16:36 +0100</pubDate><guid>https://wldt.github.io/docs/guides/dt-engine-dt-instance/</guid><description>Now that we have created the main fundamental element of a DT (Physical Adapter, Shadowing Function and Digital Adapter) we can create Class file with a main to create the WLDT Engine with the created components and start the DT.</description></item><item><title>Digital Actions</title><link>https://wldt.github.io/docs/guides/digital-actions/</link><pubDate>Fri, 09 Feb 2024 12:18:13 +0100</pubDate><guid>https://wldt.github.io/docs/guides/digital-actions/</guid><description>In this demo implementation, we are going to emulate an incoming Digital Action on the Digital Adapter in order to show how it can be handled by the adapter and properly forwarded to the Shadowing Function for validation and the consequent interaction with the Physical Adapter and then with the physical twin.</description></item><item><title>Configurable Adapters</title><link>https://wldt.github.io/docs/guides/configurable-adapters/</link><pubDate>Fri, 09 Feb 2024 12:19:37 +0100</pubDate><guid>https://wldt.github.io/docs/guides/configurable-adapters/</guid><description>The WLDT library provides a native method to define Configurable Physical ad Digital Adapters specifying a custom configuration class passed as parameter in the constructor.</description></item><item><title>MQTT Physical Adapter</title><link>https://wldt.github.io/docs/adapters/mqtt-physical-adapter/</link><pubDate>Fri, 09 Feb 2024 12:55:52 +0100</pubDate><guid>https://wldt.github.io/docs/adapters/mqtt-physical-adapter/</guid><description>The MqttPhysicalAdapter library provides a streamlined solution for efficiently managing physical assets through the MQTT protocol. It offers a range of features, including a versatile builder for effortless configuration of MQTT connections, dedicated classes for handling both incoming and outgoing topics, and a specialized adapter designed for seamless integration with diverse physical assets.</description></item><item><title>MQTT Digital Adapter</title><link>https://wldt.github.io/docs/adapters/mqtt-digital-adapter/</link><pubDate>Fri, 09 Feb 2024 12:58:14 +0100</pubDate><guid>https://wldt.github.io/docs/adapters/mqtt-digital-adapter/</guid><description>The MqttDigitalAdapter,
MqttDigitalAdapterConfiguration, and MqttDigitalAdapterConfigurationBuilder classes and guides you through using these classes to set up an MQTT Digital Adapter within WLDT.</description></item><item><title>Change Log 0.3.0</title><link>https://wldt.github.io/docs/change-logs/change-log-0.3.0/</link><pubDate>Fri, 09 Feb 2024 12:23:33 +0100</pubDate><guid>https://wldt.github.io/docs/change-logs/change-log-0.3.0/</guid><description>Digital Adapters The following methods have been discontinued and removed from the DigitalAdapter class: onStateChangePropertyCreated onStateChangePropertyUpdated onStateChangePropertyDeleted onStatePropertyUpdated onStatePropertyDeleted onStateChangeActionEnabled onStateChangeActionUpdated onStateChangeActionDisabled onStateChangeEventRegistered onStateChangeEventRegistrationUpdated onStateChangeEventUnregistered onStateChangeRelationshipInstanceDeleted onStateChangeRelationshipDeleted onStateChangeRelationshipInstanceCreated onStateChangeRelationshipCreated onDigitalTwinStateEventNotificationReceived The Signature of the following methods have been changed: onDigitalTwinSync(IDigitalTwinState currentDigitalTwinState) -&amp;gt; onDigitalTwinSync(DigitalTwinState currentDigitalTwinState) onDigitalTwinUnSync(IDigitalTwinState currentDigitalTwinState) -&amp;gt; onDigitalTwinUnSync(DigitalTwinState currentDigitalTwinState) New methods that have been added are: onStateUpdate(DigitalTwinState newDigitalTwinState, DigitalTwinState previousDigitalTwinState, ArrayList&amp;lt;DigitalTwinStateChange&amp;gt; digitalTwinStateChangeList) onEventNotificationReceived(DigitalTwinStateEventNotification&amp;lt;?</description></item></channel></rss>