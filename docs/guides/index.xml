<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on WLDT</title><link>https://wldt.github.io/docs/guides/</link><description>Recent content in Getting Started on WLDT</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright (c) 2023 Hyas</copyright><lastBuildDate>Fri, 09 Feb 2024 12:11:11 +0100</lastBuildDate><atom:link href="https://wldt.github.io/docs/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Physical Adapter</title><link>https://wldt.github.io/docs/guides/physical-adapter/</link><pubDate>Fri, 09 Feb 2024 12:09:02 +0100</pubDate><guid>https://wldt.github.io/docs/guides/physical-adapter/</guid><description>The developer can use an existing Physical Adapter or create a new one to handle the communication with a specific physical twin.</description></item><item><title>Shadowing Function</title><link>https://wldt.github.io/docs/guides/shadowing-function/</link><pubDate>Fri, 09 Feb 2024 12:15:33 +0100</pubDate><guid>https://wldt.github.io/docs/guides/shadowing-function/</guid><description>After the definition of the Physical Adapter it is time to start implementing the core of our DT through the definition of its shadowing function in charge of:</description></item><item><title>Digital Adapter</title><link>https://wldt.github.io/docs/guides/digital-adapter/</link><pubDate>Fri, 09 Feb 2024 12:16:06 +0100</pubDate><guid>https://wldt.github.io/docs/guides/digital-adapter/</guid><description>The las component that we have to implement to complete our first simple Digital Twin definition through the WLDT library is a Digital Adapter in charge of:</description></item><item><title>DT Engine &amp; DT Instance</title><link>https://wldt.github.io/docs/guides/dt-engine-dt-instance/</link><pubDate>Fri, 09 Feb 2024 12:16:36 +0100</pubDate><guid>https://wldt.github.io/docs/guides/dt-engine-dt-instance/</guid><description>Now that we have created the main fundamental element of a DT (Physical Adapter, Shadowing Function and Digital Adapter) we can create Class file with a main to create the WLDT Engine with the created components and start the DT.</description></item><item><title>Digital Actions</title><link>https://wldt.github.io/docs/guides/digital-actions/</link><pubDate>Fri, 09 Feb 2024 12:18:13 +0100</pubDate><guid>https://wldt.github.io/docs/guides/digital-actions/</guid><description>In this demo implementation, we are going to emulate an incoming Digital Action on the Digital Adapter in order to show how it can be handled by the adapter and properly forwarded to the Shadowing Function for validation and the consequent interaction with the Physical Adapter and then with the physical twin.</description></item><item><title>DT Relationships</title><link>https://wldt.github.io/docs/guides/dt-relationships/</link><pubDate>Fri, 09 Feb 2024 12:19:08 +0100</pubDate><guid>https://wldt.github.io/docs/guides/dt-relationships/</guid><description>The same management that we have illustrated for Properties, Events and Action can be applied also to Digital Twin Relationships. Relationships represent the links that exist between the modeled physical assets and other physical entity of the organizations through links to their corresponding Digital Twins.</description></item><item><title>Configurable Adapters</title><link>https://wldt.github.io/docs/guides/configurable-adapters/</link><pubDate>Fri, 09 Feb 2024 12:19:37 +0100</pubDate><guid>https://wldt.github.io/docs/guides/configurable-adapters/</guid><description>The WLDT library provides a native method to define Configurable Physical ad Digital Adapters specifying a custom configuration class passed as parameter in the constructor.</description></item><item><title>Storage Layer</title><link>https://wldt.github.io/docs/guides/storage-layer/</link><pubDate>Thu, 29 Aug 2024 17:46:07 +0200</pubDate><guid>https://wldt.github.io/docs/guides/storage-layer/</guid><description>The storage layer has been integrated into the core WLDT library, enabling Digital Twins to manually and automatically store data related to the evolution of their state, generated events (as illustrated in DT Events Page), and any variations involving properties, events, actions, relationships, and life cycle.</description></item></channel></rss>